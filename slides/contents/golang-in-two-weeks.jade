---
template: slide2.jade
title: Golang in two weeks
date: 2014-01-20 20:50
theme: default
---

section
	h1 Golang in two weeks (10 hours)
	br
	h3 Tyr Chen
	br
	div Stay hungry, stay foolish 
	div 2014-01-20

section
	section
		h2 Week One
		ul
			li Day 1 - Installation and keywords
			li Day 2 - Basic data types, control flow and function (closure)
			li Day 3 - OOP - struct, method and coding by convention
			li Day 4 - Concurrency (go and chan)
			li Day 5 - Exception handling and introspection (through interface)
	section
		h2 Week Two
		ul
			li Day 1 - Common Libraries and go test
			li Day 2 - String manipulation and regular expression
			li Day 3 - Networking
			li Day 4 - Dos and Donts
			li Day 5 - Writing a go application
section
	section
		h2 Day 1
		h4 Installation and Keywords
	section
		h3 Installation
	section
		div.fragment
			p In CentOS 6:
			pre
				code.
					$ sudo yum install -y golang
		div.fragment
			p In Ubuntu:
			pre
				code.
					$ sudo apt-get install -y golang
		div.fragment 
			p don't forget to set 
				code $GOPATH
			pre
				code.
					export GOPATH=$HOME/go
	section
		h3 Keywords
	section
		pre
			code.
				break        default      func         interface    select
				case         defer        go           map          struct
				chan         else         goto         package      switch
				const        fallthrough  if           range        type
				continue     for          import       return       var
	section
		h2 First go program
		div.fragment.coderunner
			pre.main
				code(suffix='go').
					package main

					import (
						"fmt"
					)

					const HELLO = "Hello world!"

					func main() {
						hello := HELLO // equal to "var hello string = HELLO"
						fmt.Printf("Greeting from golang: %s\n", hello)
						return
					}
			
	section
		h2 TBD

section
	section
		h2 Day 2
		h4 Basic data types, control flow and function (closure)

section
	section
		h2 Day 3
		h4 OOP - struct, method and coding by convention

section
	section
		h2 Day 4
		h4 Concurrency (go and chan)

section
	section
		h2 Day 5
		h4 Exception handling and introspection (through interface)
	section
		h2 Agenda
		p Exception handling
		ul
			li Error handling
			li Runtime exceptions and panic
			li 
		p Introspection with interface
	section
		h3 Exception handling
	section
		h3 
	section
		h3 Introspection

section
	section
		h2 Day 6
		h4 Common Libraries and go test
	section
		h2 Agenda
		p builtin types and functions
		p standard I/O
		p networking
		p misc
		blockquote for a list of packages, see 
			a(href="http://golang.org/pkg/") go packages
	section
		h3 Builtin types and functions
	section
		h2 types
		p (u)int(8/16/32/64), rune
		p string, bool, byte
		p float(32/64)
		p error
		pre
			code.
				type error interface {
					Error() string
				}
	section
		h2 functions
		p make, append, cap, len, copy
		p new, delete, close
		p panic, recover
	section
		h3 Standard I/O
	section
		h2 fmt
		p fmt.Printf(ln)
		p fmt.Sprintf(ln)
		blockquote see 
			a(href="http://golang.org/pkg/fmt") fmt package
	section
		h2 io
		p basic way to deal with file IO
		div.fragment.coderunner
			pre.main
				code(suffix='go').
					package main

					import (
						"io"
						"os"
						"io/ioutil"
						"log"
						"fmt"
					)

					func prepare() {
						if err := ioutil.WriteFile("input.txt", []byte("Hello world\n"), 0666); err != nil {
							log.Fatal(err)
							return
						}
					}

					func show() {
						if b, err := ioutil.ReadFile("output.txt"); err != nil {
							log.Fatal(err)
							return
						} else {
							fmt.Printf("%s", string(b))
						}
					}

					func main() {
						// open input file
						prepare()

						defer func() {
							os.Remove("input.txt")
							os.Remove("output.txt")
						}()

						fi, err := os.Open("input.txt")
						if err != nil { panic(err) }
						// close fi on exit and check for its returned error
						defer func() {
							if err := fi.Close(); err != nil {
								panic(err)
							}
						}()

						// open output file
						fo, err := os.Create("output.txt")
						if err != nil { panic(err) }
						// close fo on exit and check for its returned error
						defer func() {
							if err := fo.Close(); err != nil {
								panic(err)
							}
						}()

						// make a buffer to keep chunks that are read
						buf := make([]byte, 1024)
						for {
							// read a chunk
							n, err := fi.Read(buf)
							if err != nil && err != io.EOF { panic(err) }
							if n == 0 { break }

							// write a chunk
							if _, err := fo.Write(buf[:n]); err != nil {
								panic(err)
							}
						}
						show()
					}
	section
		h2 bufio
		p very useful, typical buffer reader and writer
		div.fragment.coderunner
			pre.main
				code(suffix='go').
					package main

					import (
						"bufio"
						"io"
						"os"
						"io/ioutil"
						"log"
						"fmt"
					)

					func prepare() {
						if err := ioutil.WriteFile("input.txt", []byte("Hello world\n"), 0666); err != nil {
							log.Fatal(err)
							return
						}
					}

					func show() {
						if b, err := ioutil.ReadFile("output.txt"); err != nil {
							log.Fatal(err)
							return
						} else {
							fmt.Printf("%s", string(b))
						}
					}

					func main() {
						// open input file
						prepare()

						defer func() {
							os.Remove("input.txt")
							os.Remove("output.txt")
						}()

						// open input file
						fi, err := os.Open("input.txt")
						if err != nil { panic(err) }
						// close fi on exit and check for its returned error
						defer func() {
							if err := fi.Close(); err != nil {
								panic(err)
							}
						}()
						// make a read buffer
						r := bufio.NewReader(fi)

						// open output file
						fo, err := os.Create("output.txt")
						if err != nil { panic(err) }
						// close fo on exit and check for its returned error
						defer func() {
							if err := fo.Close(); err != nil {
								panic(err)
							}
						}()
						// make a write buffer
						w := bufio.NewWriter(fo)

						// make a buffer to keep chunks that are read
						buf := make([]byte, 1024)
						for {
							// read a chunk
							n, err := r.Read(buf)
							if err != nil && err != io.EOF { panic(err) }
							if n == 0 { break }

							// write a chunk
							if _, err := w.Write(buf[:n]); err != nil {
								panic(err)
							}
						}

						if err = w.Flush(); err != nil { panic(err) }
						show()
					}
				button.coderunner.btn.btn-default(suffix="go") Run!
	section
		h2 ioutil
		p it is simple but use it only for small files!
		div.fragment.coderunner
			pre.main
				code(suffix='go').
					package main

					import (
						"os"
						"io/ioutil"
						"log"
						"fmt"
					)

					func prepare() {
						if err := ioutil.WriteFile("input.txt", []byte("Hello world\n"), 0666); err != nil {
							log.Fatal(err)
							return
						}
					}

					func show() {
						if b, err := ioutil.ReadFile("output.txt"); err != nil {
							log.Fatal(err)
							return
						} else {
							fmt.Printf("%s", string(b))
						}
					}

					func main() {
						// open input file
						prepare()

						defer func() {
							os.Remove("input.txt")
							os.Remove("output.txt")
						}()
						// read whole the file
						b, err := ioutil.ReadFile("input.txt")
						if err != nil { panic(err) }

						// write whole the body
						err = ioutil.WriteFile("output.txt", b, 0644)
						if err != nil { panic(err) }

						show()
					}
	section
		h3 Networking
	section
		h2 net
		p for a complete list of functions, read 
			a(href="http://golang.org/pkg/net/") net package
	section
		h2 tcpclient
		div.fragment.coderunner
			pre.main
				code(suffix='go').
					package main

					import (
						"fmt"
						"net"
						"bufio"
					)

					func main() {
						conn, err := net.Dial("tcp", "google.com:80")
						if err != nil {
							// handle error
						}
						fmt.Fprintf(conn, "GET / HTTP/1.0\r\n\r\n")
						status, err := bufio.NewReader(conn).ReadString('\n')
						fmt.Println(status)
					}	
	section
		h2 tcpserver
		div.fragment.coderunner
			pre.main
				code(suffix='go').
					package main

					import (
						"bufio"
						"fmt"
						"log"
						"net"
						"os"
						"strings"
					)

					func client() {
						conn, err := net.Dial("tcp", "localhost:3000")
						writer := bufio.NewWriter(conn)
						reader := bufio.NewReader(conn)
						msg := "Hello world!\n"
						fmt.Printf("client:send: %s\n", msg)
						if _, err := writer.WriteString(msg); err != nil {
							log.Fatal(err)
						}

						if err = writer.Flush(); err != nil {
							panic(err)
						}

						reply, err := reader.ReadString('\n')
						fmt.Printf("client:receive: %s\n", reply)

						fmt.Printf("client:send: %s\n", "close")
						writer.WriteString("close\n")
						if err = writer.Flush(); err != nil {
							panic(err)
						}

					}

					func main() {
						l, err := net.Listen("tcp", ":3000")
						if err != nil {
							log.Fatal(err)
						}
						defer l.Close()
						go client()
						for {
							conn, err := l.Accept()
							if err != nil {
								log.Fatal(err)
							}
							go func(c net.Conn) {
								for {
									reader := bufio.NewReader(c)
									writer := bufio.NewWriter(c)
									msg, err := reader.ReadString('\n')
									fmt.Printf("server:receive: %s\n", msg)
									if strings.Contains(msg, "close") {
										fmt.Printf("close client and ternimate server\n")
										c.Close()
										os.Exit(0)
									}

									fmt.Printf("server:send: %s\n", msg)
									if _, err := writer.WriteString(msg); err != nil {
										log.Fatal(err)
									}

									if err = writer.Flush(); err != nil {
										panic(err)
									}
								}
							}(conn)
						}
					}		
section
	section
		h2 Day 7
		h4 String manipulation and regular expression
	section
		h3 String manipulation
		p the <a href="http://golang.org/pkg/strings/"> <code>strings</code> library</a>
		p the <a href="http://golang.org/pkg/strconv/"> <code>strconv</code> library</a>
	section
		h3 Regular expression
	section
		h2 Basic regular expression
		p the <a href="http://golang.org/pkg/regexp/"> <code>regexp</code> library</a>
		p use <a href="http://www.regexr.com/">regexr.com</a> to build your regex
	section
		h2 Basic functionality
		div.fragment.coderunner
			pre.main
				code(suffix="go").
					package main

					import (
						"fmt"
						"regexp"
					)

					func main() {
						r, err := regexp.Compile(`[0-9]+`)

						if err != nil {
							fmt.Printf("There is a problem with your regexp.\n")
							return
						}

						// Will print 'Match'
						if r.MatchString("This is my number: 123456.") == true {
							fmt.Printf("Match\n")
						} else {
							fmt.Printf("No match\n")
						}
					}
	section
		h2 A real world example
		div.fragment.coderunner
			pre.main
				code(suffix="go").
					package main

					import "fmt"
					
					func main () {
						fmt.Printf("Hello world\n")
					}
	section
		h2 A real world example
		div.fragment.coderunner
			pre.main
				code(suffix="go").
					package main

					import (
						"fmt"
						"os"
						"os/exec"
						"regexp"
						"strings"
					)

					type KVPair map[string]string
					type IpMacTable []KVPair

					const (
						ARP_REGEX = `.*?\s+\((?P<ip>[\d\.]+)\)\s+at\s+(?P<mac>[a-zA-Z\d:]+)`
					)

					func parseArpTable() (captures IpMacTable) {
						captures = make(IpMacTable, 0)
						data, err := exec.Command("arp", "-a").Output()
						if err != nil {
							fmt.Printf("Error running arp command: %v\n", err)
							os.Exit(1)
						}

						regex := regexp.MustCompile(ARP_REGEX)
						names := regex.SubexpNames()
						matches := regex.FindAllStringSubmatch(string(data), -1)
						for _, match := range matches {
							cmap := make(KVPair)
							for pos, val := range match {
								name := names[pos]
								if name != "" {
									cmap[name] = val
								}
							}
							captures = append(captures, cmap)
						}
						return
					}

					func (self IpMacTable) String() string {
						arr := make([]string, 8)
						for _, item := range self {
							for k, v := range item {
								arr = append(arr, fmt.Sprintf("\t%s: %s\n", k, v))
							}
						}
						return "[\n" + strings.Join(arr, "") + "]\n"
					}

					func main() {
						captures := parseArpTable()
						fmt.Println(captures)
					}
section
	section
		h2 Day 8
		h4 Networking
		p download chat program 
			a(href="../../_static/chatroom/") chatroom code

section
	section
		h2 Day 9
		h4 Dos and Donts

section
	section
		h2 Day 10
		h4 Writing a go application

