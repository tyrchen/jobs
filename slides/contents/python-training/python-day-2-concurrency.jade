---
template: slide2.jade
title: concurrency
date: 2014-04-16 20:50
theme: default
---

section
    h1 Python Concurrency
    br
    h3 Tyr Chen
    br
    div Stay hungry, stay foolish 
    div 2014-04-16

section
    h2 Agenda
    ul
        li.fragment Concurrency is not parallelism
        li.fragment Threading
        li.fragment Gevent

section
    section
        h3 Concurrency is not parrallelism (4:30)
        iframe(width="560", height="315", src="//www.youtube.com/embed/cN_DpYBzKso", frameborder="0", allowfullscreen)

section
    section
        h3 Threading
    section
        h3 Threading exmaple
        div.fragment
            pre
                code.
                    import threading

                    class ListProcessor(threading.Thread):
                        def __init__(self, l, f):
                            self.l = l
                            self.f = f
                            super(ListProcessor, self).__init__()

                        def run(self):
                            self.l = map(self.f, self.l)

                    def chunks(l, n):
                        for i in xrange(0, len(l), n):
                            yield l[i:i+n]

                    def calcBigList():
                        bigList = range(1, 100)
                        threads = []
                        for l in chunks(bigList, 10):
                            lp = ListProcessor(l, lambda x: x * 2)
                            lp.start()
                            threads.append(lp)

                        for t in threads:
                            t.join()
                            print t.l

                    calcBigList()
    section
        h3 Multiprocessing
        div.fragment
            pre
                code.
                    import multiprocessing

                    class ListProcessor(multiprocessing.Process):
                        def __init__(self, l, f):
                            self.l = l
                            self.f = f
                            super(ListProcessor, self).__init__()

                        def run(self):
                            self.l = map(self.f, self.l)

                    def chunks(l, n):
                        for i in xrange(0, len(l), n):
                            yield l[i:i+n]

                    def calcBigList():
                        bigList = range(1, 100)
                        processes = []
                        for l in chunks(bigList, 10):
                            lp = ListProcessor(l, lambda x: x * 2)
                            lp.start()
                            processes.append(lp)

                        for t in processes:
                            t.join()
                            print t.l

                    calcBigList()        
    section
        h3 GIL
    section
        h3 Threading deadloop
        div.fragment
            pre
                code.
                    import threading

                    def dead_loop():
                        while True:
                            pass

                    # new dead loop thread
                    t = threading.Thread(target=dead_loop)
                    t.start()

                    # dead loop on main thread
                    dead_loop()

                    t.join()                                
    section
        h3 Processing deadloop
        div.fragment
            pre
                code.
                    import multiprocessing

                    def dead_loop():
                        while True:
                            pass

                    # new dead loop process
                    p = multiprocessing.Process(target=dead_loop)
                    p.start()

                    # dead loop on main process
                    dead_loop()

                    p.join()                
    section
        h3 threading.lock
        pre
            code.
                lock = threading.Lock()
                lock.acquire()
                # critical section
                lock.release()
    section
        h3 Timer
        div.fragment
            pre
                code.
                    In [12]: import threading

                    In [13]: def hello():
                       ....:     print "Hello world!"
                       ....:

                    In [14]: t = threading.Timer(3, hello)

                    In [15]: t.start()

                    In [16]: Hello world!
    section
        h3 Other functions
        div.fragment
            pre
                code.
                    In [21]: threading.currentThread()
                    Out[21]: <_MainThread(MainThread, started 140735199609216)>

                    In [22]: threading.activeCount()
                    Out[22]: 2

                    In [23]: threading.enumerate()
                    Out[23]:
                    [<_MainThread(MainThread, started 140735199609216)>,
                     <HistorySavingThread(Thread-1, started 4454400000)>]                

section
    section
        h3 gevent
    section
        h3 first of all, what is coroutine?
    section
        h3 gevent introduction
        ul
            li.fragment Based on libev - 
                a(href="http://libev.schmorp.de/bench.html") benchmark
            li.fragment Used for IO intensive tasks
            li.fragment Need 
    section
        h3 gevent example
        div.fragment
            pre
                code.
                    In [1]: import gevent

                    In [2]: def foo():
                       ...:     print "Running foo"
                       ...:     gevent.sleep(0)
                       ...:     print "Explicit context switch to foo again"
                       ...:

                    In [3]: def bar():
                       ...:     print "Explicit context switch to bar"
                       ...:     gevent.sleep(0)
                       ...:     print "Implicit context switch to bar"
                       ...:

                    In [4]: gevent.joinall([
                       ...: gevent.spawn(foo),
                       ...: gevent.spawn(bar)
                       ...: ])
    section
        h3 result
        div.fragment
            pre
                code.
                    Running foo
                    Explicit context switch to bar
                    Explicit context switch to foo again
                    Implicit context switch to bar                
            img(src="/assets/files/slides/flow.gif")
    section
        p.well more on gevent: 
            a(href="http://sdiehl.github.io/gevent-tutorial/") gevent for developer
