---
template: slide2.jade
title: Python advanced - functional / meta programming
date: 2014-04-16 20:50
theme: default
---

section
    h1 Python advanced
    h2 functional and meta programming
    br
    h3 Tyr Chen
    br
    div Stay hungry, stay foolish 
    div 2014-04-16

section
    h2 Agenda
    ul
        li.fragment What is functional programming
        li.fragment Python functional programming
        li.fragment itertools
        li.fragment functools
        li.fragment kachayev/fn.py
        li.fragment Python metaprogramming

section
    section
        h3 What is functional programming
    section
        h3 Classification of languages
        ul
            li.fragment Imperative programming (ะก/C++, Java, Python)
            li.fragment 
                | Declarative programming
                ul
                    li Functional programming (Haskell, Erlang, Scheme, OCaml)
                    li Logic programming (Prolog)        
    section
        h3 What is functional programming about 
        ul
            li.fragment Avoid state
            li.fragment Immutable data
            li.fragment First-class functions
            li.fragment Higher-order functions
            li.fragment Pure functions (no side effects)
            li.fragment Recursion & tail recursion
            li.fragment Iterators, sequences
            li.fragment Lazy evaluation
            li.fragment Pattern matching
            li.fragment Monads....
    section
        h3 Let's see a haskell example
        div.fragment
            pre
                code.
                    boomBangs xs = [if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]

                    length1 xs = sum [1|_ <- xs]

                    removeUpperCase xs = [x|x <- xs, not (x `elem` ['A'..'Z'])]

                    multList n [] = []
                    multList n (x:xs) = n*x : multList n xs

                    multList1 f [] = []
                    multList1 f (x:xs) = f(x) : multList1 f xs

                    doubleList = multList1 (2*)
                    tripleList = multList 3
    section
        h3 Python implementation
        div.fragment
            pre
                code.
                    In [23]: boomBangs = lambda l: ["Boom" if x < 10 else "Bang" for x in l if x % 2 == 1]

                    In [24]: boomBangs([6, 8,9,10,11,12])
                    Out[24]: ['Boom', 'Boom', 'Bang']
                    ...
                    def multList(x):
                        def func(l):
                            return [item * x for item in l]
                        return func

                    In [41]: f = multList(2)

                    In [42]: f([1,2,3,4])
                    Out[42]: [2, 4, 6, 8]                    
    section
        h3 lambda
    section
        h3 High ordered function
    section
        h3 Tail recursive
        div.fragment
            pre
                code.
                    fac 0 = 1
                    fac n = n * fac (n-1)        
    section
        h3 Lazy evaluation
        div.fragment
            pre
                code.
                    *Main> take 5 [1..]
                    [1,2,3,4,5]

section
    section
        h3 Python functional programming
    section
        h3 Case study
        p.well Please write a program to calculate a string expression, like this "3*20*7*48"
    section
        h3 Implementation
        div.fragment
            p The imperative way
            pre
                code.
                    In [89]: s = "3*20*7*48"

                    In [90]: r = 1

                    In [91]: for t in s.split("*"):
                        if t != "":
                            r *= int(t)
                       ....:

                    In [92]: r
                    Out[92]: 20160
        div.fragment
            p The functional way
            pre
                code.
                    In [94]: import operator

                    In [95]: reduce(operator.mul, map(int, filter(bool, s.split('*'))))
                    Out[95]: 20160
    section
        h3 Let's start with factorial
        div.fragment
            p the imperative way
            pre
                code.
                    def factorial(n):
                        num = 1
                        while n >= 1:
                            num = num * n
                            n = n - 1
                        return num
        div.fragment
            p the function way
            pre
                code.
                    def factorial(n):
                        return n * factorial(n-1)
        p.well.fragment NOTE: python doesn't do any optimization on tail recursive
    section
        h3 high order function
        div.fragment
            pre
                code.
                    class MyPerson():
                           def __init__(self, name, age):
                                  self.name = name
                                  self.age = age
                           def __unicode__(self):
                                  return '%s: %d' % (self.name, self.age)
                           def __repr__(self):
                               return self.__unicode__()
                       ....:

                    In [22]: my_cmp = lambda x,y: cmp(x.age, y.age)
                    In [23]: people = [MyPerson('tyr', 32), MyPerson('Grandpa', 80), MyPerson('Susan', 49)]

                    In [24]: sorted(people, my_cmp)
                    Out[24]: [tyr: 32, Susan: 49, Grandpa: 80]
    section
        h3 closure
        div.fragment
            pre
                code.
                    In [1]: def add(x):
                       ...:     def __fun(y):
                       ...:         return x + y
                       ...:     return __fun
                       ...:

                    In [2]: add2 = add(2)

                    In [3]: add2(3)
                    Out[3]: 5
    section
        h3 curry
        div.fragment
            p traditional way to program
            pre
                code.
                    In [123]: list_sum = lambda l: reduce(operator.add, l)

                    In [124]: list_mul = lambda l: reduce(operator.mul, l)

                    In [125]: list_sum([1,2,3,4])
                    Out[125]: 10

                    In [126]: list_mul([1,2,3,4])
                    Out[126]: 24
    section
        h3 curry
        div.fragment
            p currying
            pre
                code.
                    In [127]: def list_op(f):
                       .....:     def apply(l):
                       .....:         return reduce(f, l)
                       .....:     return apply
                       .....:

                    In [128]: list_sum1 = list_op(operator.add)

                    In [129]: list_mul1 = list_op(operator.mul)

                    In [130]: list_sum1([1,2,3,4])
                    Out[130]: 10

                    In [131]: list_mul1([1,2,3,4])
                    Out[131]: 24                
    section
        h3 builtin functional programming functions
        p
            code map, reduce, filter, zip, all, any, max, min, ...
        div.fragment
            pre
                code.
                    In [29]: map(lambda x: x*2, [1,2,3,4])
                    Out[29]: [2, 4, 6, 8]

                    In [30]: filter(lambda x: x > 10, [8,9,10,11,12])
                    Out[30]: [11, 12]

                    In [31]: reduce(lambda x, y: x+y, [1,2,3,4], 0)
                    Out[31]: 10

                    In [32]: all([1,2,3,4])
                    Out[32]: True

                    In [33]: all([False, None, 1])
                    Out[33]: False

                    In [34]: any([False, None, 1])
                    Out[34]: True

                    In [36]: max(people, key = lambda x: x.age)
                    Out[36]: Grandpa: 80

                    In [37]: min(people, key = lambda x: x.age)
                    Out[37]: tyr: 32      
                    
                    In [38]: zip([1,2],[3,4])
                    Out[38]: [(1, 3), (2, 4)]       

section
    section
        h3 itertools
    section
        h3 What does it contain?
        div.fragment
            pre
                code.
                    In [39]: import itertools

                    In [40]: dir(iter
                    iter       itertools

                    In [40]: dir(itertools)
                    Out[40]:
                    ['__doc__',
                     '__file__',
                     '__name__',
                     '__package__',
                     'chain',
                     'combinations',
                     'combinations_with_replacement',
                     'compress',
                     'count',
                     'cycle',
                     'dropwhile',
                     'groupby',
                     'ifilter',
                     'ifilterfalse',
                     'imap',
                     'islice',
                     'izip',
                     'izip_longest',
                     'permutations',
                     'product',
                     'repeat',
                     'starmap',
                     'takewhile',
                     'tee']         
    section
        h3 Examples
        div.fragment
            pre
                code.
                    In [104]: list(itertools.chain([1,2,3], [10,20,30]))
                    Out[104]: [1, 2, 3, 10, 20, 30]

                    In [105]: list(itertools.chain('abc', 'def', 'ghi'))
                    Out[105]: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']

                    In [107]: list(itertools.takewhile(lambda x: x < 1000, fabonacci()))
                    Out[107]: [3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]

                    In [109]: dict(itertools.izip("ABCD", [1,2,3,4]))
                    Out[109]: {'A': 1, 'B': 2, 'C': 3, 'D': 4}

                    In [110]: list(itertools.imap(pow, (2,5,10), (10,5,2)))
                    Out[110]: [1024, 3125, 100]

                    In [113]: list(itertools.starmap(lambda k,v: "%s: %s" % (k,v), {'a':1, 'b':2}.items()))
                    Out[113]: ['a: 1', 'b: 2']              
    section
        h3 Case study
        p let's try these functions one by one! (use "help()" when needed)     
section
    section
        h3 functools
    section
        h3 What does it contain?
        div.fragment
            pre
                code.
                    In [60]: dir(functools)
                    Out[60]:
                    ['WRAPPER_ASSIGNMENTS',
                     'WRAPPER_UPDATES',
                     '__builtins__',
                     '__doc__',
                     '__file__',
                     '__name__',
                     '__package__',
                     'cmp_to_key',
                     'partial',
                     'reduce',
                     'total_ordering',
                     'update_wrapper',
                     'wraps']       
    section
        h3 wraps
        div.fragment
            p the problem of the decorator
            pre
                code.
                    In [65]: def timeit(func):
                       ....:     def __decorator(*args, **kwargs):
                       ....:         t1 = time.time()
                       ....:         func(*args, **kwargs)
                       ....:         t2 = time.time()
                       ....:         print('TIMING:%s took %0.3f ms' % (func.__name__, (t2 - t1) * 1000.0))
                       ....:     return __decorator
                       ....:

                    In [66]: @timeit
                       ....: def hello():
                       ....:     print("Hello world")
                       ....:     time.sleep(1)
                       ....:

                    In [68]: hello()
                    Hello world
                    TIMING:hello took 1000.851 ms

                    In [69]: hello.__name__
                    Out[69]: '__decorator'
    section
        h3 wraps
        div.fragment
            p fix it with wraps decorator
            pre
                code.
                    In [70]: def timeit(func):
                       ....:     @functools.wraps(func)
                       ....:     def __decorator(*args, **kwargs):
                       ....:         t1 = time.time()
                       ....:         func(*args, **kwargs)
                       ....:         t2 = time.time()
                       ....:         print('TIMING:%s took %0.3f ms' % (func.__name__, (t2 - t1) * 1000.0))
                       ....:     return __decorator
                       ....:

                    In [71]: @timeit
                       ....: def hello():
                       ....:     print("Hello world")
                       ....:     time.sleep(1)
                       ....:

                    In [72]: hello()
                    Hello world
                    TIMING:hello took 1000.851 ms

                    In [73]: hello.__name__
                    Out[73]: 'hello'        
    section
        h3 partial
        div.fragment
            pre
                code.
                    In [114]: def log(level, message):
                       .....:     print("[{level}]: {msg}".format(level=level, msg=message))
                       .....:

                    In [115]: log("debug", "hello")
                    [debug]: hello

                    In [116]: def debug(message):
                       .....:     log("debug", message)
                       .....:

                    In [117]: debug("world")
                    [debug]: world

                    In [118]: debug1 = functools.partial(log, "debug")

                    In [119]: debug1("hello world!")
                    [debug]: hello world!     
section
    section
        h3 kachayev/fn.py
    section
        p Fn.py library provides you with missing "batteries" to get maximum from functional approach even in mostly-imperative program.
        p.well
            a(href="https://github.com/kachayev/fn.py") kachayev/fn.py

section
    section
        h3 What did python miss on functional programming?
        ul
            li.fragment Errors handling without exceptions
            li.fragment Pattern matching
            li.fragment Message passing
            li.fragment Lazy evaluation (generator is a kind of ...)

section
    section
        h3 Metaprogramming
        p metaprogramming is the writing of computer programs that write or manipulate other programs (or themselves) as their data, 
            b or that do part of the work at compile time that would otherwise be done at runtime
    section
        h3 classes are objects
        div.fragment
            pre
                code.
                    In [134]: class Foo:
                       .....:     pass
                       .....:

                    In [135]: x = Foo()

                    In [136]: Foo.field = 1

                    In [137]: x.field
                    Out[137]: 1

                    In [140]: Foo.say = lambda self: "hello world!"

                    In [141]: x.say()
                    Out[141]: 'hello world!'                
    section
        h3 Another way to create class
        div.fragment
            pre
                code.
                    In [142]: def say(self):
                       .....:     print("Hello, {name}".format(name=self.name))
                       .....:

                    In [143]: def foo_init(self, name):
                       .....:     self.name = name
                       .....:

                    In [144]: Foo = type("Foo", (object,), dict(say=say, __init__=foo_init))

                    In [145]: f = Foo("Tyr")

                    In [146]: f.say()
                    Hello, Tyr

                    In [147]: f.__class__
                    Out[147]: __main__.Foo
    section
        h3 metaclass hook
        div.fragment
            pre
                code.
                    In [149]: class MyMeta(type):
                       .....:     def __init__(cls, name, bases, dct):
                       .....:         super(MyMeta, cls).__init__(name, bases, dct)
                       .....:         cls.say = lambda self : "Hello {name}".format(name=self.name)
                       .....:

                    In [150]: class Foo(object):
                       .....:     __metaclass__ = MyMeta
                       .....:     def foo(self): pass
                       .....:     @staticmethod
                       .....:     def bar(): pass
                       .....:

                    In [151]: f = Foo()

                    In [152]: print([m for m in dir(f) if not m.startswith('__')])
                    ['bar', 'foo', 'say']

                    In [153]: f.name = "Tyr"

                    In [154]: print f.say()
                    Hello Tyr
    section
        h3 __new__ and __init__
        div.fragment
            pre
                code.
                    In [158]: class MyMeta1(type):
                       .....:     def __new__(m, name, bases, dct):
                       .....:         print('MyMeta1.__new__: {name}'.format(name=name))
                       .....:         name += '_haha'
                       .....:         if 'foo' in dct: dct.pop('foo')
                       .....:         dct['bar'] = True
                       .....:         return super(MyMeta1, m).__new__(m, name, bases, dct)
                       .....:     def __init__(cls, name, bases, dct):
                       .....:         print('MyMeta1.__init__: {name}'.format(name=name))
                       .....:         if 'bar' in dct: dct.pop('bar')  # no effect
                       .....:         name += '_heihei' # no effect
                       .....:         dct['name'] = 'Tyr' # no effect
                       .....:         return super(MyMeta1, cls).__init__(name, bases, dct)
                       .....:

                    In [159]: class Foo1(object):
                       .....:     __metaclass__ = MyMeta1
                       .....:     foo = 100
                       .....:     bar = False
                       .....:
                    MyMeta1.__new__: Foo1
                    MyMeta1.__init__: Foo1

                    In [160]: Foo1.__name__
                    Out[160]: 'Foo1_haha'

                    In [161]: Foo1.foo

                    AttributeError: type object 'Foo1_haha' has no attribute 'foo'

                    In [163]: Foo1.bar
                    Out[163]: True

                    In [164]: Foo1.name

                    AttributeError: type object 'Foo1_haha' has no attribute 'name'

        p.well.fragment __new__ is called for the creation of a new class, while __init__ is called after the class is created, to perform additional initialization before the class is handed to the caller
    section
        h3 __call__
        div.fragment
            pre
                code.
                    In [168]: class MyMeta2(type):
                       .....:     def __call__(cls, *args, **kwargs):
                       .....:         print("MyMeta2.__call__", args, kwargs)
                       .....:

                    In [171]: class Foo2(object):
                       .....:     __metaclass__ = MyMeta2
                       .....:     def __init__(self, name, foo=1):
                       .....:         self.name = name
                       .....:

                    In [172]: f = Foo2("Tyr")
                    ('MyMeta2.__call__', ('Tyr',), {})                
    section
        h3 Intercepting class creation
        div.fragment
            pre
                code.
                    In [173]: class Singleton(type):
                       .....:     inst = None
                       .....:     def __call__(cls, *args, **kwargs):
                       .....:         if not cls.inst:
                       .....:             cls.inst = super(Singleton, cls).__call__(*args, **kwargs)
                       .....:         return cls.inst
                       .....:

                    In [174]: class Foo3(object):
                       .....:     __metaclass__ = Singleton
                       .....:     def __init__(self, name):
                       .....:         self.name = name
                       .....:         print("Foo3.__init__")
                       .....:

                    In [175]: f1 = Foo3("Tyr")
                    Foo3.__init__

                    In [176]: f2 = Foo3("Cynthia")

                    In [177]: f1 is f2
                    Out[177]: True                
    section
        h3 Methods on the fly
        div.fragment
            pre
                code.
                    import random

                    class MetaAutoProperty(type):
                        def __init__(cls, name, bases, attrs):
                            super(MetaAutoProperty, cls).__init__(name, bases, attrs)
                            for key in attrs:
                                if not key.startswith('_') and not hasattr(attrs[key], '__call__'):
                                    new_key = 'find_by_%s' % key
                                    setattr(cls, new_key, classmethod(lambda c, value: "look up %s...find %d records"
                                            % (value, random.randint(0, 10))))

                    class AutoProperty(object):
                        __metaclass__ = MetaAutoProperty

                    class User(AutoProperty):
                        name = "Tyr"
                        _password = "won't tell you"
                        title = "Software Engineer"

                        def change_password(self, password):
                            self._password = password

                    if __name__ == '__main__':
                        print User.find_by_name("Hello World")
                        print User.find_by_title("MTS")

                    $ python  ./metatest.py
                    look up Hello World...find 8 records
                    look up MTS...find 6 records